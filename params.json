{"name":"Cards-UI","tagline":"A library that allows you to easily mimic Google Play's card layout on Android.","body":"# Welcome\r\n\r\n![DeviceFrames](https://raw.github.com/afollestad/Cards-UI/master/images/CardsUIThemes.png)\r\n\r\nBefore you can get Cards-UI integrated with your project, you will need one dependency that needs to be referenced as an Android Library Project from Cards-UI (a library module in IntelliJ IDEA or Android Studio):\r\n\r\n1. **Silk** (http://github.com/afollestad/Silk)\r\n\r\n\r\n***\r\n\r\n\r\n# Introduction\r\nCards-UI consists of two main classes, `CardListView` and `CardAdapter`. \r\n\r\n\r\n***\r\n\r\n\r\n1. **CardListView** – a ListView that enforces the use of a `CardAdapter` rather than any regular list adapter. Automatically sets its background to a lighter gray or darker gray based on the current theme, and handles notifying the adapter of theme changes. Has a `setOnCardClickListener(CardClickListener)` and `setOnCardLongClickListener(CardLongClickListener)` to optionally replace the standard click listeners of `ListView`.\r\n\r\n\r\n***\r\n\r\n\r\n2. **CardAdapter** – a `SilkAdapter` that handles rendering cards for the `CardListView`, which includes the images and title/content for regular cards and the title and action for header cards. The library also provides a `CardCursorAdapter` which is the same as the regular card adapter but it sources its contents from a Cursor using the Silk library's cursor adapter implementation (discussed later).\r\n\r\n\r\n***\r\n\r\n\r\n### Default Cards\r\n\r\nThere's a simple set of default card implementations that can be used without using any of your own classes or layouts. You can extend and override them as needed (which is discussed later) to customize them to your liking.\r\n\r\n\r\n***\r\n\r\n\r\n* **Card** – a card that displays an optional thumbnail, along with a title, content, and popup menu.\r\n\r\n![CardExample](https://raw.github.com/afollestad/Cards-UI/master/images/card_example.png)\r\n\r\n\r\n***\r\n\r\n\r\n* **CardHeader** – a card that's used as a header for a section of cards. Displays a title in italics on the left, with an action button on the right. The entire header is clickable, the action is just a hint towards clickability.\r\n\r\n![CardHeaderExample](https://raw.github.com/afollestad/Cards-UI/master/images/header_example.png)\r\n\r\n\r\n***\r\n\r\n\r\n* **CardCompressed** – similar to a regular card, but the title and content are displayed on the same line, with the title on the far left and content on the far right. There is no thumbnail for this card type in the default implementation.\r\n\r\n![CardCompressedExample](https://raw.github.com/afollestad/Cards-UI/master/images/compressed_example.png)\r\n\r\n\r\n***\r\n\r\n\r\n* **CardCenteredHeader** – a card header that displays only a centered title. This card type is useful for displaying empty text for a section within a list (looks good when it's below a `CardHeader`).\r\n\r\n![CardCenteredHeaderExample](https://raw.github.com/afollestad/Cards-UI/master/images/centeredheader_example.png)\r\n\r\n\r\n***\r\n\r\n\r\n# Code\r\nIf you want to use just the default Card classes, implementing Cards-UI is very, very simple. First you need a `CardListView` instance:\r\n\r\n```java\r\nCardListView list = ...; // Retrieve from activity, fragment, etc.\r\n```\r\n\r\nOptionally, you can set the theme (which is `Light` by default):\r\n\r\n```java\r\nlist.setCardTheme(CardTheme.Dark);\r\n```\r\n\r\nThen you need a `CardAdapter` instance, that is set to the list:\r\n\r\n```java\r\n// The first parameter is the context, e.g. an Activity\r\n// The second parameter is the accent color used for card and header titles/actions\r\nCardAdapter adapter = new CardAdapter(this, android.R.color.holo_blue_dark);\r\n\r\n// This will connect the adapter and list, sharing the theme and contents\r\nlist.setAdapter(adapter);\r\n```\r\n\r\n\r\n***\r\n\r\n\r\n### Adding Cards\r\n\r\nAdding cards to your list is simple:\r\n\r\n```java\r\n// Alternatively, you can pass a context and string resources in place of strings\r\n// CardHeader has an optional second parameter for a subtitle\r\nCardHeader header = new CardHeader(\"I'm a header\");\r\n// You can optionally set an action to the header\r\n// Specifying no action title will default to 'See More'\r\nheader.setAction(\"See More\", new CardHeader.ActionListener() {\r\n            @Override\r\n            public void onHeaderActionClick(CardHeader header) {\r\n                // Do whatever you want\r\n            }\r\n        });\r\n// Add the header to the adapter, automatically notifies the list\r\nadapter.add(header);\r\n\r\n// Again, you can pass a context and string resources in place of strings\r\nCard card = new Card(\"Hello\", \"My name is Aidan\");\r\nadapter.add(card);\r\n```\r\n\r\nAll of the other default card classes accept the same format for their constructors.\r\n\r\n\r\n***\r\n\r\n\r\n### Popup Menus\r\n\r\nIf you look at app listings in Google Play, you can see the three-dot button on the top right of cards that gives you options such as \"Install\" so you don't have to go into the app page before installing an it. Cards-UI makes it easy to add popup menus like that. \r\n\r\nThere's two ways to do this: you can add a popup menu to the adapter to automatically set it to every card...\r\n\r\n```java\r\nCardAdapter adapter = ...; // initialize the adapter\r\n// The menu resource is equivalent to what you use for action bar menus\r\nadapter.setPopupMenu(R.menu.popupmenu_resource, new Card.CardMenuListener<Card>() {\r\n    @Override\r\n    public void onMenuItemClick(Card card, MenuItem item) {\r\n        // Do whatever you want \r\n    }\r\n});\r\n```\r\n\r\n...or you can set popup menus to individual cards if not every card should have the same menu.\r\n\r\n```java\r\nCard card = ...; // initialize the card\r\n// The menu resource is equivalent to what you use for action bar menus\r\ncard.setPopupMenu(R.menu.popupmenu_resource, new Card.CardMenuListener<Card>() {\r\n    @Override\r\n    public void onMenuItemClick(Card card, MenuItem item) {\r\n        // Do whatever you want \r\n    }\r\n});\r\n```\r\n\r\nIf a Card does not have a popup menu set via the adapter or the card itself, the three-dot menu icon will be hidden from the user.\r\n\r\n\r\n***\r\n\r\n\r\n# Custom Cards and Adapters\r\n\r\nIf you want to implement functionality that isn't provided by Cards-UI by default, you can extend its classes and layouts to whatever you need. Before you start, you should look at the layouts under `/res/layout` of Cards-UI. You'll see that each layout references styles to provide a consistent look among all the cards.\r\n\r\n\r\n***\r\n\r\n\r\n### Making a Custom Layout\r\n\r\nFirst, you'll need a custom layout file. This layout is a modified version of the default card layout:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n              style=\"@style/card_outer_frame\">\r\n    <RelativeLayout android:id=\"@android:id/widget_frame\"\r\n                    style=\"@style/card_inner_frame\">\r\n\r\n        <ImageView android:id=\"@android:id/icon\" style=\"@style/card_thumbnail\"/>\r\n\r\n        <RelativeLayout android:id=\"@+id/titleFrame\" style=\"@style/card_title_frame\">\r\n            <TextView android:id=\"@android:id/title\" style=\"@style/card_title\"/>\r\n            <ImageButton android:id=\"@android:id/button1\" style=\"@style/card_popup_anchor\"/>\r\n        </RelativeLayout>\r\n\r\n        <com.afollestad.silk.views.text.SilkTextView android:id=\"@android:id/content\"\r\n                                                     style=\"@style/card_content_custom\"/>\r\n\r\n    </RelativeLayout>\r\n</LinearLayout>\r\n```\r\n\r\nThe only thing I changed for this example is the style set to `@android:id/content`. Here's the style definition of `card_content_custom` inside of my styles.xml file:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<resources>\r\n    <style name=\"card_content_custom\" parent=\"@style/card_content\">\r\n        <item name=\"android:singleLine\">false</item>\r\n        <item name=\"android:maxLines\">3</item>\r\n    </style>\r\n</resources>\r\n```\r\n\r\nThis custom layout takes away the singleLine behavior of the default card, and makes the maximum number of lines for the card content 3.\r\n\r\nYou then need a custom class that extends `Card` and overrides `getLayout()` to return your custom layout:\r\n\r\n```java\r\npublic class CustomCard extends Card {\r\n    public CustomCard(Context context, int title, int content) {\r\n        super(context, title, content);\r\n    }\r\n\r\n    public int getLayout() {\r\n        // Replace with your layout\r\n        return R.layout.custom_card;\r\n    }\r\n}\r\n```\r\n\r\nNow instead of adding a `Card` to your adapter, you add a `CustomCard`.\r\n\r\n\r\n***\r\n\r\n\r\n### Adding Views\r\n\r\nIf you need more views in your card layout, you can add them in and manually set their contents from a custom adapter. Here's a new custom layout with additional views:\r\n\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n              style=\"@style/card_outer_frame\">\r\n    <RelativeLayout android:id=\"@android:id/widget_frame\"\r\n                    style=\"@style/card_inner_frame\">\r\n\r\n        <ImageView android:id=\"@android:id/icon\" style=\"@style/card_thumbnail\"/>\r\n\r\n        <RelativeLayout android:id=\"@+id/titleFrame\" style=\"@style/card_title_frame\">\r\n            <TextView android:id=\"@android:id/title\" style=\"@style/card_title\"/>\r\n            <ImageButton android:id=\"@android:id/button1\" style=\"@style/card_popup_anchor\"/>\r\n        </RelativeLayout>\r\n\r\n        <com.afollestad.silk.views.text.SilkTextView android:id=\"@android:id/content\"\r\n                                                     style=\"@style/card_content\"/>\r\n\r\n        <com.afollestad.silk.views.text.SilkTextView android:id=\"@+id/customText\"\r\n                                                     style=\"@style/card_content\"\r\n                                                     android:layout_below=\"@android:id/content\"/>\r\n\r\n    </RelativeLayout>\r\n</LinearLayout>\r\n```\r\n\r\nYou'll need a custom adapter in order to fill the contents of this new TextView. Just create a new class that extends `CardAdapter`:\r\n\r\n```java\r\npublic class CustomAdapter extends CardAdapter {\r\n\r\n    public CustomAdapter(Context context, int accentColorRes) {\r\n        super(context, accentColorRes);\r\n        // DON'T FORGET TO REGISTER THE LAYOUT\r\n        registerLayout(R.layout.custom_card);\r\n    }\r\n\r\n    @Override\r\n    public View onViewCreated(int index, View recycled, CardBase item) {\r\n        View view = super.onViewCreated(index, recycled, item);\r\n        TextView customText = (TextView) view.findViewById(R.id.customText);\r\n        if(customText != null)\r\n            customText.setText(\"Hello, I'm a custom view\");\r\n        return view;\r\n    }\r\n}\r\n```\r\n\r\nNotice that it overrides `onViewCreated` and sets the text for the custom view. Other methods of CardAdapter that can be overrided include `onProcessThumbnail`, `onProcessTitle`, `onProcessContent`, and `onProcessMenu` (along with the methods included in `SilkAdapter`).\r\n\r\n`onViewCreated` is inherited from `SilkAdapter`, it's equivalent to `getView` of the stock `BaseAdapter` class but it automatically handles view recycling for you. `onViewCreated` is called for every item in your list, including headers and other items that may not be an instance of `Card`. Ways to check this are by checking the return value of `item.isHeader()` or `item instanceof Card`. In this example above, we just check if the custom `TextView` is null or not.\r\n\r\n***\r\n\r\n\r\nFurther example can be found in the [sample project](https://github.com/afollestad/Cards-UI/tree/master/sample) included in the library; the sample project's dependencies are [listed in the README](https://github.com/afollestad/Cards-UI#using-the-sample) of Cards-UI.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}